/**
 * Library App API
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext 
        }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

// @ts-ignore
import { Author } from '../model/author';
// @ts-ignore
import { AuthorRequest } from '../model/authorRequest';
// @ts-ignore
import { Book } from '../model/book';
// @ts-ignore
import { BookRequest } from '../model/bookRequest';
// @ts-ignore
import { PaginatedAuthorList } from '../model/paginatedAuthorList';
// @ts-ignore
import { PaginatedBookList } from '../model/paginatedBookList';
// @ts-ignore
import { PatchedAuthorRequest } from '../model/patchedAuthorRequest';
// @ts-ignore
import { PatchedBookRequest } from '../model/patchedBookRequest';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';
import { BaseService } from '../api.base.service';
import {
    LibraryServiceInterface,
    LibraryAuthorsCreateRequestParams,
    LibraryAuthorsDestroyRequestParams,
    LibraryAuthorsListRequestParams,
    LibraryAuthorsPartialUpdateRequestParams,
    LibraryAuthorsRetrieveRequestParams,
    LibraryAuthorsUpdateRequestParams,
    LibraryBooksCreateRequestParams,
    LibraryBooksDestroyRequestParams,
    LibraryBooksListRequestParams,
    LibraryBooksPartialUpdateRequestParams,
    LibraryBooksRetrieveRequestParams,
    LibraryBooksUpdateRequestParams
} from './library.serviceInterface';



@Injectable({
  providedIn: 'root'
})
export class LibraryService extends BaseService implements LibraryServiceInterface {

    constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string|string[], @Optional() configuration?: Configuration) {
        super(basePath, configuration);
    }

    /**
     * Creates a new book instance.  This method overrides the default &#x60;create&#x60; method to enforce that the requesting user has the \&quot;create-author\&quot; role via the &#x60;keycloak_role_required&#x60; decorator. If the user has the required role, it creates a new book; otherwise, access is denied.  Args:   request: The HTTP request object containing the book data.  Returns:   Response: A DRF Response object containing the serialized book details or an error message.
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public libraryAuthorsCreate(requestParameters: LibraryAuthorsCreateRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<Author>;
    public libraryAuthorsCreate(requestParameters: LibraryAuthorsCreateRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<Author>>;
    public libraryAuthorsCreate(requestParameters: LibraryAuthorsCreateRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<Author>>;
    public libraryAuthorsCreate(requestParameters: LibraryAuthorsCreateRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const authorRequest = requestParameters?.authorRequest;
        if (authorRequest === null || authorRequest === undefined) {
            throw new Error('Required parameter authorRequest was null or undefined when calling libraryAuthorsCreate.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (KeyCloakAuthentication) required
        localVarHeaders = this.configuration.addCredentialToHeaders('KeyCloakAuthentication', 'api_key', localVarHeaders);

        // authentication (basicAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('basicAuth', 'Authorization', localVarHeaders, 'Basic ');

        // authentication (cookieAuth) required

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/x-www-form-urlencoded',
            'multipart/form-data'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/library/authors`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<Author>('post', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: authorRequest,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Deletes a specific book instance by its primary key (pk).  This method overrides the default &#x60;destroy&#x60; method to enforce that the requesting user has the \&quot;create-author\&quot; role via the &#x60;keycloak_role_required&#x60; decorator. If the user has the required role, it deletes the specified book; otherwise, access is denied.  Args:   request: The HTTP request object.   pk: The primary key of the book instance to delete.  Returns:   Response: A DRF Response object indicating success or failure of the deletion.
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public libraryAuthorsDestroy(requestParameters: LibraryAuthorsDestroyRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any>;
    public libraryAuthorsDestroy(requestParameters: LibraryAuthorsDestroyRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<any>>;
    public libraryAuthorsDestroy(requestParameters: LibraryAuthorsDestroyRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<any>>;
    public libraryAuthorsDestroy(requestParameters: LibraryAuthorsDestroyRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const id = requestParameters?.id;
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling libraryAuthorsDestroy.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (KeyCloakAuthentication) required
        localVarHeaders = this.configuration.addCredentialToHeaders('KeyCloakAuthentication', 'api_key', localVarHeaders);

        // authentication (basicAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('basicAuth', 'Authorization', localVarHeaders, 'Basic ');

        // authentication (cookieAuth) required

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/library/authors/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: undefined})}`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<any>('delete', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Lists all author instances.  This method overrides the default &#x60;list&#x60; method to provide a custom implementation for listing author instances. It returns a paginated list of authors.  Args:     request: The HTTP request object.  Returns:     Response: A DRF Response object containing the serialized list of authors.
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public libraryAuthorsList(requestParameters?: LibraryAuthorsListRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<PaginatedAuthorList>;
    public libraryAuthorsList(requestParameters?: LibraryAuthorsListRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<PaginatedAuthorList>>;
    public libraryAuthorsList(requestParameters?: LibraryAuthorsListRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<PaginatedAuthorList>>;
    public libraryAuthorsList(requestParameters?: LibraryAuthorsListRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const citizenship = requestParameters?.citizenship;
        const firstName = requestParameters?.firstName;
        const lastName = requestParameters?.lastName;
        const ordering = requestParameters?.ordering;
        const page = requestParameters?.page;
        const pageSize = requestParameters?.pageSize;
        const search = requestParameters?.search;

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>citizenship, 'citizenship');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>firstName, 'first_name');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>lastName, 'last_name');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>ordering, 'ordering');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>page, 'page');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>pageSize, 'page_size');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>search, 'search');

        let localVarHeaders = this.defaultHeaders;

        // authentication (KeyCloakAuthentication) required
        localVarHeaders = this.configuration.addCredentialToHeaders('KeyCloakAuthentication', 'api_key', localVarHeaders);

        // authentication (basicAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('basicAuth', 'Authorization', localVarHeaders, 'Basic ');

        // authentication (cookieAuth) required

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/library/authors`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<PaginatedAuthorList>('get', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Partially updates an existing book instance.  This method overrides the default &#x60;partial_update&#x60; method to enforce that the requesting user has the \&quot;create-author\&quot; role via the &#x60;keycloak_role_required&#x60; decorator. If the user has the required role, it partially updates the specified book; otherwise, access is denied.  Args:   request: The HTTP request object containing the updated book data.   pk: The primary key of the book instance to update.  Returns:   Response: A DRF Response object containing the serialized book details or an error message.
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public libraryAuthorsPartialUpdate(requestParameters: LibraryAuthorsPartialUpdateRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<Author>;
    public libraryAuthorsPartialUpdate(requestParameters: LibraryAuthorsPartialUpdateRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<Author>>;
    public libraryAuthorsPartialUpdate(requestParameters: LibraryAuthorsPartialUpdateRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<Author>>;
    public libraryAuthorsPartialUpdate(requestParameters: LibraryAuthorsPartialUpdateRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const id = requestParameters?.id;
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling libraryAuthorsPartialUpdate.');
        }
        const patchedAuthorRequest = requestParameters?.patchedAuthorRequest;

        let localVarHeaders = this.defaultHeaders;

        // authentication (KeyCloakAuthentication) required
        localVarHeaders = this.configuration.addCredentialToHeaders('KeyCloakAuthentication', 'api_key', localVarHeaders);

        // authentication (basicAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('basicAuth', 'Authorization', localVarHeaders, 'Basic ');

        // authentication (cookieAuth) required

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/x-www-form-urlencoded',
            'multipart/form-data'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/library/authors/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: undefined})}`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<Author>('patch', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: patchedAuthorRequest,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieves a specific author instance.  This method overrides the default &#x60;retrieve&#x60; method to provide a custom implementation for retrieving an author instance by its primary key (pk).  Args:     request: The HTTP request object.     pk: The primary key of the author instance to retrieve.  Returns:     Response: A DRF Response object containing the serialized author instance.
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public libraryAuthorsRetrieve(requestParameters: LibraryAuthorsRetrieveRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<Author>;
    public libraryAuthorsRetrieve(requestParameters: LibraryAuthorsRetrieveRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<Author>>;
    public libraryAuthorsRetrieve(requestParameters: LibraryAuthorsRetrieveRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<Author>>;
    public libraryAuthorsRetrieve(requestParameters: LibraryAuthorsRetrieveRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const id = requestParameters?.id;
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling libraryAuthorsRetrieve.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (KeyCloakAuthentication) required
        localVarHeaders = this.configuration.addCredentialToHeaders('KeyCloakAuthentication', 'api_key', localVarHeaders);

        // authentication (basicAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('basicAuth', 'Authorization', localVarHeaders, 'Basic ');

        // authentication (cookieAuth) required

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/library/authors/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: undefined})}`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<Author>('get', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates an existing book instance.  This method overrides the default &#x60;update&#x60; method to enforce that the requesting user has the \&quot;create-author\&quot; role via the &#x60;keycloak_role_required&#x60; decorator. If the user has the required role, it updates the specified book; otherwise, access is denied.  Args:   request: The HTTP request object containing the updated book data.   pk: The primary key of the book instance to update.  Returns:   Response: A DRF Response object containing the serialized book details or an error message.
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public libraryAuthorsUpdate(requestParameters: LibraryAuthorsUpdateRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<Author>;
    public libraryAuthorsUpdate(requestParameters: LibraryAuthorsUpdateRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<Author>>;
    public libraryAuthorsUpdate(requestParameters: LibraryAuthorsUpdateRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<Author>>;
    public libraryAuthorsUpdate(requestParameters: LibraryAuthorsUpdateRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const id = requestParameters?.id;
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling libraryAuthorsUpdate.');
        }
        const authorRequest = requestParameters?.authorRequest;
        if (authorRequest === null || authorRequest === undefined) {
            throw new Error('Required parameter authorRequest was null or undefined when calling libraryAuthorsUpdate.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (KeyCloakAuthentication) required
        localVarHeaders = this.configuration.addCredentialToHeaders('KeyCloakAuthentication', 'api_key', localVarHeaders);

        // authentication (basicAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('basicAuth', 'Authorization', localVarHeaders, 'Basic ');

        // authentication (cookieAuth) required

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/x-www-form-urlencoded',
            'multipart/form-data'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/library/authors/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: undefined})}`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<Author>('put', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: authorRequest,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Creates a new book instance.  This method overrides the default &#x60;create&#x60; method to enforce that the requesting user has the \&quot;create-book\&quot; role via the &#x60;keycloak_role_required&#x60; decorator. If the user has the required role, it creates a new book; otherwise, access is denied.  Args:   request: The HTTP request object containing the book data.  Returns:   Response: A DRF Response object containing the serialized book details or an error message.
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public libraryBooksCreate(requestParameters: LibraryBooksCreateRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<Book>;
    public libraryBooksCreate(requestParameters: LibraryBooksCreateRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<Book>>;
    public libraryBooksCreate(requestParameters: LibraryBooksCreateRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<Book>>;
    public libraryBooksCreate(requestParameters: LibraryBooksCreateRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const bookRequest = requestParameters?.bookRequest;
        if (bookRequest === null || bookRequest === undefined) {
            throw new Error('Required parameter bookRequest was null or undefined when calling libraryBooksCreate.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (KeyCloakAuthentication) required
        localVarHeaders = this.configuration.addCredentialToHeaders('KeyCloakAuthentication', 'api_key', localVarHeaders);

        // authentication (basicAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('basicAuth', 'Authorization', localVarHeaders, 'Basic ');

        // authentication (cookieAuth) required

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/x-www-form-urlencoded',
            'multipart/form-data'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/library/books`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<Book>('post', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: bookRequest,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Deletes a specific book instance by its primary key (pk).  This method overrides the default &#x60;destroy&#x60; method to enforce that the requesting user has the \&quot;create-book\&quot; role via the &#x60;keycloak_role_required&#x60; decorator. If the user has the required role, it deletes the specified book; otherwise, access is denied.  Args:   request: The HTTP request object.   pk: The primary key of the book instance to delete.  Returns:   Response: A DRF Response object indicating success or failure of the deletion.
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public libraryBooksDestroy(requestParameters: LibraryBooksDestroyRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any>;
    public libraryBooksDestroy(requestParameters: LibraryBooksDestroyRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<any>>;
    public libraryBooksDestroy(requestParameters: LibraryBooksDestroyRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<any>>;
    public libraryBooksDestroy(requestParameters: LibraryBooksDestroyRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const id = requestParameters?.id;
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling libraryBooksDestroy.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (KeyCloakAuthentication) required
        localVarHeaders = this.configuration.addCredentialToHeaders('KeyCloakAuthentication', 'api_key', localVarHeaders);

        // authentication (basicAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('basicAuth', 'Authorization', localVarHeaders, 'Basic ');

        // authentication (cookieAuth) required

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/library/books/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: undefined})}`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<any>('delete', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Lists all book instances.  This method overrides the default &#x60;list&#x60; method to enforce that the requesting user has the \&quot;view-books\&quot; role via the &#x60;keycloak_role_required&#x60; decorator. If the user has the required role, it returns a list of all books; otherwise, access is denied.  Args:   request: The HTTP request object.  Returns:   Response: A DRF Response object containing the serialized list of books or an error message.
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public libraryBooksList(requestParameters?: LibraryBooksListRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<PaginatedBookList>;
    public libraryBooksList(requestParameters?: LibraryBooksListRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<PaginatedBookList>>;
    public libraryBooksList(requestParameters?: LibraryBooksListRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<PaginatedBookList>>;
    public libraryBooksList(requestParameters?: LibraryBooksListRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const author = requestParameters?.author;
        const ordering = requestParameters?.ordering;
        const page = requestParameters?.page;
        const pageSize = requestParameters?.pageSize;
        const publicationDate = requestParameters?.publicationDate;
        const search = requestParameters?.search;
        const title = requestParameters?.title;

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>author, 'author');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>ordering, 'ordering');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>page, 'page');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>pageSize, 'page_size');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>publicationDate, 'publication_date');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>search, 'search');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>title, 'title');

        let localVarHeaders = this.defaultHeaders;

        // authentication (KeyCloakAuthentication) required
        localVarHeaders = this.configuration.addCredentialToHeaders('KeyCloakAuthentication', 'api_key', localVarHeaders);

        // authentication (basicAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('basicAuth', 'Authorization', localVarHeaders, 'Basic ');

        // authentication (cookieAuth) required

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/library/books`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<PaginatedBookList>('get', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Partially updates an existing book instance.  This method overrides the default &#x60;partial_update&#x60; method to enforce that the requesting user has the \&quot;create-book\&quot; role via the &#x60;keycloak_role_required&#x60; decorator. If the user has the required role, it partially updates the specified book; otherwise, access is denied.  Args:   request: The HTTP request object containing the updated book data.   pk: The primary key of the book instance to update.  Returns:   Response: A DRF Response object containing the serialized book details or an error message.
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public libraryBooksPartialUpdate(requestParameters: LibraryBooksPartialUpdateRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<Book>;
    public libraryBooksPartialUpdate(requestParameters: LibraryBooksPartialUpdateRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<Book>>;
    public libraryBooksPartialUpdate(requestParameters: LibraryBooksPartialUpdateRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<Book>>;
    public libraryBooksPartialUpdate(requestParameters: LibraryBooksPartialUpdateRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const id = requestParameters?.id;
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling libraryBooksPartialUpdate.');
        }
        const patchedBookRequest = requestParameters?.patchedBookRequest;

        let localVarHeaders = this.defaultHeaders;

        // authentication (KeyCloakAuthentication) required
        localVarHeaders = this.configuration.addCredentialToHeaders('KeyCloakAuthentication', 'api_key', localVarHeaders);

        // authentication (basicAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('basicAuth', 'Authorization', localVarHeaders, 'Basic ');

        // authentication (cookieAuth) required

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/x-www-form-urlencoded',
            'multipart/form-data'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/library/books/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: undefined})}`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<Book>('patch', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: patchedBookRequest,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieves a specific book instance by its primary key (pk).  This method overrides the default &#x60;retrieve&#x60; method to enforce that the requesting user has the \&quot;view-books\&quot; role via the &#x60;keycloak_role_required&#x60; decorator. If the user has the required role, it returns the details of the specified book; otherwise, access is denied.  Args:   request: The HTTP request object.   pk: The primary key of the book instance to retrieve.  Returns:   Response: A DRF Response object containing the serialized book details or an error message.
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public libraryBooksRetrieve(requestParameters: LibraryBooksRetrieveRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<Book>;
    public libraryBooksRetrieve(requestParameters: LibraryBooksRetrieveRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<Book>>;
    public libraryBooksRetrieve(requestParameters: LibraryBooksRetrieveRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<Book>>;
    public libraryBooksRetrieve(requestParameters: LibraryBooksRetrieveRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const id = requestParameters?.id;
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling libraryBooksRetrieve.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (KeyCloakAuthentication) required
        localVarHeaders = this.configuration.addCredentialToHeaders('KeyCloakAuthentication', 'api_key', localVarHeaders);

        // authentication (basicAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('basicAuth', 'Authorization', localVarHeaders, 'Basic ');

        // authentication (cookieAuth) required

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/library/books/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: undefined})}`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<Book>('get', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates an existing book instance.  This method overrides the default &#x60;update&#x60; method to enforce that the requesting user has the \&quot;create-book\&quot; role via the &#x60;keycloak_role_required&#x60; decorator. If the user has the required role, it updates the specified book; otherwise, access is denied.  Args:   request: The HTTP request object containing the updated book data.   pk: The primary key of the book instance to update.  Returns:   Response: A DRF Response object containing the serialized book details or an error message.
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public libraryBooksUpdate(requestParameters: LibraryBooksUpdateRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<Book>;
    public libraryBooksUpdate(requestParameters: LibraryBooksUpdateRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<Book>>;
    public libraryBooksUpdate(requestParameters: LibraryBooksUpdateRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<Book>>;
    public libraryBooksUpdate(requestParameters: LibraryBooksUpdateRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const id = requestParameters?.id;
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling libraryBooksUpdate.');
        }
        const bookRequest = requestParameters?.bookRequest;
        if (bookRequest === null || bookRequest === undefined) {
            throw new Error('Required parameter bookRequest was null or undefined when calling libraryBooksUpdate.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (KeyCloakAuthentication) required
        localVarHeaders = this.configuration.addCredentialToHeaders('KeyCloakAuthentication', 'api_key', localVarHeaders);

        // authentication (basicAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('basicAuth', 'Authorization', localVarHeaders, 'Basic ');

        // authentication (cookieAuth) required

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/x-www-form-urlencoded',
            'multipart/form-data'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/library/books/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: undefined})}`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<Book>('put', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: bookRequest,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

}
