/**
 * Library App API
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpHeaders }                                       from '@angular/common/http';

import { Observable }                                        from 'rxjs';

import { Author } from '../model/models';
import { AuthorRequest } from '../model/models';
import { Book } from '../model/models';
import { BookRequest } from '../model/models';
import { PaginatedAuthorList } from '../model/models';
import { PaginatedBookList } from '../model/models';
import { PatchedAuthorRequest } from '../model/models';
import { PatchedBookRequest } from '../model/models';


import { Configuration }                                     from '../configuration';


export interface LibraryAuthorsCreateRequestParams {
    authorRequest: AuthorRequest;
}

export interface LibraryAuthorsDestroyRequestParams {
    id: number;
}

export interface LibraryAuthorsListRequestParams {
    citizenship?: string;
    firstName?: string;
    lastName?: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
    search?: string;
}

export interface LibraryAuthorsPartialUpdateRequestParams {
    id: number;
    patchedAuthorRequest?: PatchedAuthorRequest;
}

export interface LibraryAuthorsRetrieveRequestParams {
    id: number;
}

export interface LibraryAuthorsUpdateRequestParams {
    id: number;
    authorRequest: AuthorRequest;
}

export interface LibraryBooksCreateRequestParams {
    bookRequest: BookRequest;
}

export interface LibraryBooksDestroyRequestParams {
    id: number;
}

export interface LibraryBooksListRequestParams {
    author?: number;
    ordering?: string;
    page?: number;
    pageSize?: number;
    publicationDate?: string;
    search?: string;
    title?: string;
}

export interface LibraryBooksPartialUpdateRequestParams {
    id: number;
    patchedBookRequest?: PatchedBookRequest;
}

export interface LibraryBooksRetrieveRequestParams {
    id: number;
}

export interface LibraryBooksUpdateRequestParams {
    id: number;
    bookRequest: BookRequest;
}


export interface LibraryServiceInterface {
    defaultHeaders: HttpHeaders;
    configuration: Configuration;

    /**
     * 
     * Creates a new book instance.  This method overrides the default &#x60;create&#x60; method to enforce that the requesting user has the \&quot;create-author\&quot; role via the &#x60;keycloak_role_required&#x60; decorator. If the user has the required role, it creates a new book; otherwise, access is denied.  Args:   request: The HTTP request object containing the book data.  Returns:   Response: A DRF Response object containing the serialized book details or an error message.
* @param requestParameters
     */
    libraryAuthorsCreate(requestParameters: LibraryAuthorsCreateRequestParams, extraHttpRequestParams?: any): Observable<Author>;

    /**
     * 
     * Deletes a specific book instance by its primary key (pk).  This method overrides the default &#x60;destroy&#x60; method to enforce that the requesting user has the \&quot;create-author\&quot; role via the &#x60;keycloak_role_required&#x60; decorator. If the user has the required role, it deletes the specified book; otherwise, access is denied.  Args:   request: The HTTP request object.   pk: The primary key of the book instance to delete.  Returns:   Response: A DRF Response object indicating success or failure of the deletion.
* @param requestParameters
     */
    libraryAuthorsDestroy(requestParameters: LibraryAuthorsDestroyRequestParams, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * 
     * Lists all author instances.  This method overrides the default &#x60;list&#x60; method to provide a custom implementation for listing author instances. It returns a paginated list of authors.  Args:     request: The HTTP request object.  Returns:     Response: A DRF Response object containing the serialized list of authors.
* @param requestParameters
     */
    libraryAuthorsList(requestParameters: LibraryAuthorsListRequestParams, extraHttpRequestParams?: any): Observable<PaginatedAuthorList>;

    /**
     * 
     * Partially updates an existing book instance.  This method overrides the default &#x60;partial_update&#x60; method to enforce that the requesting user has the \&quot;create-author\&quot; role via the &#x60;keycloak_role_required&#x60; decorator. If the user has the required role, it partially updates the specified book; otherwise, access is denied.  Args:   request: The HTTP request object containing the updated book data.   pk: The primary key of the book instance to update.  Returns:   Response: A DRF Response object containing the serialized book details or an error message.
* @param requestParameters
     */
    libraryAuthorsPartialUpdate(requestParameters: LibraryAuthorsPartialUpdateRequestParams, extraHttpRequestParams?: any): Observable<Author>;

    /**
     * 
     * Retrieves a specific author instance.  This method overrides the default &#x60;retrieve&#x60; method to provide a custom implementation for retrieving an author instance by its primary key (pk).  Args:     request: The HTTP request object.     pk: The primary key of the author instance to retrieve.  Returns:     Response: A DRF Response object containing the serialized author instance.
* @param requestParameters
     */
    libraryAuthorsRetrieve(requestParameters: LibraryAuthorsRetrieveRequestParams, extraHttpRequestParams?: any): Observable<Author>;

    /**
     * 
     * Updates an existing book instance.  This method overrides the default &#x60;update&#x60; method to enforce that the requesting user has the \&quot;create-author\&quot; role via the &#x60;keycloak_role_required&#x60; decorator. If the user has the required role, it updates the specified book; otherwise, access is denied.  Args:   request: The HTTP request object containing the updated book data.   pk: The primary key of the book instance to update.  Returns:   Response: A DRF Response object containing the serialized book details or an error message.
* @param requestParameters
     */
    libraryAuthorsUpdate(requestParameters: LibraryAuthorsUpdateRequestParams, extraHttpRequestParams?: any): Observable<Author>;

    /**
     * 
     * Creates a new book instance.  This method overrides the default &#x60;create&#x60; method to enforce that the requesting user has the \&quot;create-book\&quot; role via the &#x60;keycloak_role_required&#x60; decorator. If the user has the required role, it creates a new book; otherwise, access is denied.  Args:   request: The HTTP request object containing the book data.  Returns:   Response: A DRF Response object containing the serialized book details or an error message.
* @param requestParameters
     */
    libraryBooksCreate(requestParameters: LibraryBooksCreateRequestParams, extraHttpRequestParams?: any): Observable<Book>;

    /**
     * 
     * Deletes a specific book instance by its primary key (pk).  This method overrides the default &#x60;destroy&#x60; method to enforce that the requesting user has the \&quot;create-book\&quot; role via the &#x60;keycloak_role_required&#x60; decorator. If the user has the required role, it deletes the specified book; otherwise, access is denied.  Args:   request: The HTTP request object.   pk: The primary key of the book instance to delete.  Returns:   Response: A DRF Response object indicating success or failure of the deletion.
* @param requestParameters
     */
    libraryBooksDestroy(requestParameters: LibraryBooksDestroyRequestParams, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * 
     * Lists all book instances.  This method overrides the default &#x60;list&#x60; method to enforce that the requesting user has the \&quot;view-books\&quot; role via the &#x60;keycloak_role_required&#x60; decorator. If the user has the required role, it returns a list of all books; otherwise, access is denied.  Args:   request: The HTTP request object.  Returns:   Response: A DRF Response object containing the serialized list of books or an error message.
* @param requestParameters
     */
    libraryBooksList(requestParameters: LibraryBooksListRequestParams, extraHttpRequestParams?: any): Observable<PaginatedBookList>;

    /**
     * 
     * Partially updates an existing book instance.  This method overrides the default &#x60;partial_update&#x60; method to enforce that the requesting user has the \&quot;create-book\&quot; role via the &#x60;keycloak_role_required&#x60; decorator. If the user has the required role, it partially updates the specified book; otherwise, access is denied.  Args:   request: The HTTP request object containing the updated book data.   pk: The primary key of the book instance to update.  Returns:   Response: A DRF Response object containing the serialized book details or an error message.
* @param requestParameters
     */
    libraryBooksPartialUpdate(requestParameters: LibraryBooksPartialUpdateRequestParams, extraHttpRequestParams?: any): Observable<Book>;

    /**
     * 
     * Retrieves a specific book instance by its primary key (pk).  This method overrides the default &#x60;retrieve&#x60; method to enforce that the requesting user has the \&quot;view-books\&quot; role via the &#x60;keycloak_role_required&#x60; decorator. If the user has the required role, it returns the details of the specified book; otherwise, access is denied.  Args:   request: The HTTP request object.   pk: The primary key of the book instance to retrieve.  Returns:   Response: A DRF Response object containing the serialized book details or an error message.
* @param requestParameters
     */
    libraryBooksRetrieve(requestParameters: LibraryBooksRetrieveRequestParams, extraHttpRequestParams?: any): Observable<Book>;

    /**
     * 
     * Updates an existing book instance.  This method overrides the default &#x60;update&#x60; method to enforce that the requesting user has the \&quot;create-book\&quot; role via the &#x60;keycloak_role_required&#x60; decorator. If the user has the required role, it updates the specified book; otherwise, access is denied.  Args:   request: The HTTP request object containing the updated book data.   pk: The primary key of the book instance to update.  Returns:   Response: A DRF Response object containing the serialized book details or an error message.
* @param requestParameters
     */
    libraryBooksUpdate(requestParameters: LibraryBooksUpdateRequestParams, extraHttpRequestParams?: any): Observable<Book>;

}
